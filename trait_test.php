<?php
/**
 * 优先级
 * 当前类中的方法会覆盖 trait 方法，而 trait 方法又覆盖了基类中的方法
 *
 */

class Base {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait SayWorld {
    public function sayHello() {
        parent::sayHello();
        echo 'World!';
    }
}

class MyHelloWorld extends Base {
    use SayWorld;
    public function sayHello()
    {
        //parent::sayHello(); // TODO: Change the autogenerated stub
        echo '123';
    }
}

//$o = new MyHelloWorld();
//$o->sayHello();

class Test
{
    public $a = false;
}

class A
{


}

class B
{
    public static function test1()
    {
        $test = new Test();
        call_user_func([static::class, 'test'], $test);
        var_dump($test->a);
    }
    public static function test(Test $test)
    {
        $test->a = true;
    }

}
//B::test1();


$arr['aaa'] = [
    1 => 123,
];
//var_dump(!empty($arr['aaa'][1]));



class E
{
    public $extra_data = [
        'a' => [
            'b' => [
                'c' => [
                    'd'=>10,
                ],
            ],
        ],
        'b' => [
            [
                'c' => 12,
            ]
        ],
        'a.b.c' => 11,
        'qr_settings' => [
            'forward_to_event0' => 1,
            'forward_to_event11' => 2,
            'forward_to_event22' => 3,
            'bbb' => 9,
        ],
        'qa_settings' => [
            'forward_to_event1' => 4,
            'forward_to_event2' => 5,
            'forward_to_event' => 6,
            'aaa' => [
                'bbb' => 7,
                'ccc' => 8,
            ]
        ],
    ];

    /**
     * 获取 extra_data 设置
     *
     * @param string $key
     * @return mixed|null null/未设置
     * @author jiangyi
     * @see getArrayValueByKey()
     */
    public function getExtraData($key = null)
    {
        if (!isset($this->extra_data)) {
            return null;
        }
        if ($key === null) {
            return $this->extra_data;
        }
        return $this->getArrayValueByKey($this->extra_data, $key);
    }

    /**
     * 根据数组键名获取数组里相应的值（递归），如果有重复的键则返回第一个匹配的值
     *
     * 用法如下：
     *
     * ```php
     * $array = [
     *      'a'=>[
     *          'b'=>[
     *              'c'=>2
     *          ]
     *      ]
     * ]
     * $key = 'a.b.c' return 2
     * $key = 'c' return 2
     *```
     * @param array $array
     * @param string $key
     * @return mixed|null
     * @author jiangyi
     */
    public function getArrayValueByKey($array, $key)
    {
        if (!is_array($array) || !is_string($key)) {
            return null;
        }
        // 解析带 `.` 的键
        if (false !== $pos = strpos($key, '.')) {
            list($firstKey, $secondKey) = explode('.', $key);
            if (isset($array[$firstKey][$secondKey])) {
                $surplusKey = substr($key, $pos+1);
                if (false !== $pos = strpos($surplusKey, '.')) {
                    return $this->getArrayValueByKey($array[$firstKey][$secondKey], substr($surplusKey, $pos+1));

                }
                return $array[$firstKey][$secondKey];
            }
        }

        if (isset($array[$key])) {
            return $array[$key];
        }
        foreach ($array as $item) {
            if (is_array($item)) {
                $value = $this->getArrayValueByKey($item, $key);
                if (null !== $value) {
                    return $value;
                }
            }
        }
        return null;
    }
}
//$val = (new E())->getExtraData('a.b.c');
//var_dump($val);
$url = 'http://mall.yzidea.net/m/#/taobao_cash';

if (false !== $pos = strpos($url, '#')) {
    $url = substr($url, 0, $pos);
    if (substr($url, -1) === '/') {
        $url .= 'index.html';
    }
}
//echo $url;

//var_dump(256|512);
$num = 1;
switch ($num) {
    case 1:
        $a = 1;
    case 2:
    case 3:
        $a = 3;
        break;
    default:
        $a = 0;
}
var_dump($a);
