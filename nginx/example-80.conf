server {
    # 指定字符集为 UTF-8
    charset utf-8;
    # 客户端最大的body限制
    client_max_body_size 128M;

    # 监听 HTTP 协议默认的 [80] 端口。
    # listen for ipv4
    listen 80;
    #listen [::]:80 default_server ipv6only=on; ## listen for ipv6
    # 绑定主机名 [example.com] 通配符 * 正则 ~ 开始
    #server_name *.example.com;
    #server_name ~^www\d\.example\.com$;
    server_name example.com;

    # 重定向到https
    # return 301 https://$server_name$request_uri;

    # 服务器站点根目录 [/example.com/public]。
    root /example.com/public;

    # alias path 改变location接受到的uri的请求路径
    # '/data/index.html' '/locationtest/other/index.html'
    #location ~ ^/data/(.+\.(htm|html))$ {
    #    alias /locationtest/other/$1;
    #}

    #allow address | CIDR | all
    #deny address | CIDR | all
    # 如果遇到匹配的配置则停止向下搜索相关配置

    # 添加几条有关安全的响应头；与 Google+ 的配置类似，详情参见文末。
    # 是为了减少点击劫持（Clickjacking）而引入的一个响应头 DENY：不允许被任何页面嵌入 SAMEORIGIN：不允许被本域以外的页面嵌入 ALLOW-FROM uri：不允许被指定的域名以外的页面嵌入
    add_header X-Frame-Options "SAMEORIGIN";
    # 这个响应头是用来防范XSS的 现在主流浏览器都支持，并且默认都开启了XSS保护，用这个header可以关闭它
    add_header X-XSS-Protection "1; mode=block";
    # 禁用浏览器的类型猜测行为
    add_header X-Content-Type-Options "nosniff";
    # 不要把 max-age 设置的太大。否则，万一配置有误或者需要修改配置，那你将无法让那些已经保存过 HSTS 的用户使用新的配置
    add_header Strict-Transport-Security "max-age=60";

    # 站点默认页面；可指定多个，将顺序查找。
    # 例如，访问 http://example.com/ Nginx 将首先尝试「站点根目录/index.html」是否存在，不存在则继续尝试「站点根目录/index.htm」，以此类推...
    index index.html index.htm index.php;

    # 访问日志
    #access_log  /var/log/nginx/www.test.com.access.log;
    # 错误日志
    #error_log   /var/log/nginx/www.test.com.error.log;

    # Laravel 默认重写规则；删除将导致 Laravel 路由失效且 Nginx 响应 404。
    # 假设你正在访问 /api/status?query=example
    # Nginx 会首先尝试 $uri 是否存在（这是个 Nginx 内置变量，表示请求 URI），也就是 /网站根目录/api/status
    # 如果 $uri 不存在，则尝试 $uri/，也就是 /网站根目录/api/status/
    # 如果 $uri/ 也不存在，则最终尝试 /index.php?$query_string（$query_string 也是 Nginx 的内置变量，表示 URI 内的查询字符串），也就是 /网站根目录/index.php?query=example
    # 按照 Laravel 的目录结构，/网站根目录/index.php 是必定存在的，但如果该文件确实不存在，Nginx 将会返回 404
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # location [ = | ~ | ~* | ^~ ] uri { ... }
    # = 如果匹配成功就停止继续向下搜索并立即处理此请求
    # ~ 表示uri包含正则表达式，并且区分大小写
    # ~* 表示uri包含正则表达式，并且不区分大小写
    # ^~ 表示找到匹配度最高的location后，立即使用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配
    # 可以处理uri编码 '/html/%20/data' '/html/ /data'

    # 关闭 [/favicon.ico] 和 [/robots.txt] 的访问日志。
    # 并且即使它们不存在，也不写入错误日志。
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

     # 避免在处理php之前处理静态文件
     # uncomment to avoid processing of calls to non-existing static files by Yii
     location ~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar)$ {
         try_files $uri =404;
     }

    # error_page code ... [=[response]] uri
    # error_page 410 =301 /empty.gif 产生401时，返回用户301 和网站目录的empty.gif
    # 将 [404] 错误交给 [/index.php] 处理，表示由 Laravel 渲染美观的错误页面。
    error_page 404 /index.php;

    # URI 符合正则表达式 [\.php$] 的请求将进入此段配置
    location ~ \.php$ {
        # 配置 FastCGI 服务地址，可以为 IP:端口，也可以为 Unix socket。
        # Unix socket 无法跨机器使用
        fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
        #fastcgi_pass 127.0.0.1:9000;
        # 配置 FastCGI 的主页为 index.php。
        fastcgi_index index.php;
        # 配置 FastCGI 参数 SCRIPT_FILENAME 为 $realpath_root$fastcgi_script_name。
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        # fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        # 引用更多默认的 FastCGI 参数。
        include fastcgi_params;
        try_files $uri =404;
    }
    # 通俗地说，以上配置将所有 URI 以 .php 结尾的请求，全部交给 PHP-FPM 处理。

    # 除符合正则表达式 [/\.(?!well-known).*] 之外的 URI，全部拒绝访问
    # 也就是说，拒绝公开以 [.] 开头的目录，[.well-known] 除外
    location ~ /\.(?!well-known).* {
        deny all;
    }
}
